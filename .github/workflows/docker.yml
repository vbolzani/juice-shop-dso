name: Build docker image and push to repository

on:
  push:
    branches:
      - main

jobs:
  sast:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 
        uses: actions/checkout@v3

      - name: Run Snyk to check terraform security
        uses: snyk/actions/iac@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=iac.sarif
      
      - name: Run Snyk to check Node security
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=node.sarif

      - name: Upload Snyk results
        uses: github/codeql-action/upload-sarif@v3


  push_image:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: sast
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: vbolzani/juice-shop-dso:${{ github.sha }}

  deploy:
    name: Deploy with SSH
    runs-on: ubuntu-latest
    needs: push_image
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: "Setup terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: "Setup AWS credentials"
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}

      - name: "Terraform deploy EC2"
        run:  |
          cd terraform
          terraform init
          terraform apply -var="EC2_PUBLIC_KEY=${EC2_PUBLIC_KEY}" -auto-approve
          EC2_PUBLIC_IP=$(terraform output -raw deployed_public_ip)
          echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV
        env:
          EC2_PUBLIC_KEY: ${{ secrets.EC2_PUBLIC_KEY }} 

      - name: Setup SSH key
        run: |
          echo "$EC2_PRIVATE_KEY" > private.key
          sudo chmod 600 private.key
        env:
          EC2_PRIVATE_KEY: ${{ secrets.EC2_SECRET_KEY }}

      - name: "Copying deploy script"
        run: |
          scp -o StrictHostKeyChecking=no -i private.key ./deploy.sh ubuntu@${EC2_PUBLIC_IP}:/home/ubuntu/
          ssh -o StrictHostKeyChecking=no -i private.key ubuntu@${EC2_PUBLIC_IP} chmod +x /home/ubuntu/deploy.sh
      
      - name: "Executing deploying script"
        run: |
          ssh -o StrictHostKeyChecking=no -i private.key ubuntu@${EC2_PUBLIC_IP} /home/ubuntu/deploy.sh

  dast:
    runs-on: ubuntu-latest
    name: Scan the deployed app
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Setup terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: "Setup AWS credentials"
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}

      - name: "Terraform get EC2 public IP"
        run:  |
          cd terraform
          terraform init
          EC2_PUBLIC_IP=$(terraform output -raw deployed_public_ip)

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: $${ env.EC2_PUBLIC_IP }
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

